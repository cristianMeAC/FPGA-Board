This folder should contain the following subfolders and files

├── Makefile
├── README
├── scripts
│   ├── compile.do
│   ├── sim_fileio.do
│   └── sim_simple.do
├── src
│   ├── ps2_ascii_pkg.vhd
│   ├── ps2_ascii_struct.vhd
│   └── ps2_ascii.vhd
├── tb
│   ├── ps2_ascii_tb_fileio.vhd
│   ├── ps2_ascii_tb_simple.vhd
│   └── tb_util_pkg.vhd
└── testdata
    ├── input.txt
    └── output_ref.txt

The environment provided in this directory and its subfolders can be used to automatically simulate VHDL-components. The simulation is text-based and does not plot any waveform! 

It consists of three major components - The makefile (located in this directory), TCL-scripts ("scripts" directory) and the VHDL-models including the testbenches (directories "src" and "tb").

By executing 

> make compile

the VHDL source files provided in the script "scripts/compile.do" are compiled (by Modelsim). If this environment is used to simulate other components, the VHDL sources have to be specified in this script! Note that the compilation order is important!

Afterwards either the target "sim_simple" or "sim_fileio" of the makefile can be executed.

If the makefile target "sim_simple" is executed, the script "scripts/sim_simple.do" automatically compiles and runs the testbench "tb/ps2_ascii_tb_simple.vhd".
The procedure "send_scancode" within the testbench provides new input data to the ps2_ascii component and "check_result" checks the output. If the actual output of the component does not match the parameter of the function (intended output), this results in an error, which can be observed at the output of the automated simulation environment. Based on this error, further debugging can be done to track errors in the VHDL-components. 

If "make sim_fileio" is executed, the testbench "tb/ps2_ascii_tb_fileio.vhd" is compiled and the simulation is started. This simulation reads the file "testdata/input.txt" and applies the data from this file as inputs to the unit under test (uut = ps2_ascii). It also reads the file "testdata/output_ref" and checks if the actual output of the ps2_ascii component matches the reference output of this file. Each line of these files corresponds to one input/output. 
If there is a mismatch between the actual output of the component and the reference output an error output is generated by the testbench which can be used for further debugging.

This environment can easily be adapted to simulate any other component. For this to work the component's source files have to be specified in the script "scripts/compile.do". 
The testbench has to be adapted, s.t. the new component is instantiated as uut. 
Afterwards, the input data and reference output data has to be specified to apply inputs to the component and check its outputs.

