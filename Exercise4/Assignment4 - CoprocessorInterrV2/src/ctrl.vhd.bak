 library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.core_pack.all;
use work.op_pack.all;

entity ctrl is
	
	port (
		-- define input and output ports as needed
		clk, reset : in std_logic;
		stall : in std_logic;
		pcsrc_in : in std_logic;
		pc_j_in : in std_logic_vector(PC_WIDTH-1 downto 0);
		pcsrc_out : out std_logic;
		flush : out std_logic;
		pc_j_out : out std_logic_vector(PC_WIDTH-1 downto 0);
		
		
		
			
		op : in cop0_op_type;
		exc_load : in std_logic;
		exc_store : in std_logic;
		--exc_dec : in std_logic;
		exc_ovf : in std_logic;
		aluresult_exec : in std_logic_vector(DATA_WIDTH-1 downto 0);
		mem_jmpop : in jmp_op_type;
		exec_epc : in std_logic_vector(PC_WIDTH-1 downto 0);
		mem_epc  : in std_logic_vector(PC_WIDTH-1 downto 0);
		read_reg : in std_logic_vector(REG_BITS-1 downto 0);
		
		cop0_data : out std_logic_vector(DATA_WIDTH-1 downto 0);
		flush_exec : out std_logic;
		flush_mem : out std_logic
);

end ctrl;

architecture rtl of ctrl is

	constant ADDR_STATUS : std_logic_vector(REG_BITS-1 downto 0) := "01100";
	constant ADDR_CAUSE  : std_logic_vector(REG_BITS-1 downto 0) := "01101";
	constant ADDR_EPC    : std_logic_vector(REG_BITS-1 downto 0) := "01110";
	constant ADDR_NPC    : std_logic_vector(REG_BITS-1 downto 0) := "01111";
	
	constant EX_INT : std_logic_vector(DATA_WIDTH-1 downto 0) := x"00000000";
	constant EX_LD  : std_logic_vector(DATA_WIDTH-1 downto 0) := x"00000010";
	constant EX_ST  : std_logic_vector(DATA_WIDTH-1 downto 0) := x"00000014";
	constant EX_DEC : std_logic_vector(DATA_WIDTH-1 downto 0) := x"00000028";
	constant EX_OVF : std_logic_vector(DATA_WIDTH-1 downto 0) := x"00000030";

	signal pc_j_lat : std_logic_vector(PC_WIDTH-1 downto 0) := (others => '0'); 
	signal pcsrc_lat : std_logic := '0';
	
	signal op_saved : cop0_op_type := COP0_NOP;

	signal status : std_logic_vector(DATA_WIDTH-1 downto 0) := (others => '0');
	signal cause  : std_logic_vector(DATA_WIDTH-1 downto 0) := (others => '0');
	signal epc    : std_logic_vector(DATA_WIDTH-1 downto 0) := (others => '0');
	signal npc    : std_logic_vector(DATA_WIDTH-1 downto 0) := (others => '0');
	
	signal mem_jmpop_lat : jmp_op_type := JMP_NOP;
	signal cause_q : std_logic_vector(DATA_WIDTH-1 downto 0) := (others => '0');
	signal npc_q : std_logic_vector(PC_WIDTH-1 downto 0) := (others => '0');

	signal flush_lat : std_logic := '0';
	signal flush_q : std_logic := '0';


begin  -- rtl




	prepare_output : process(all)
	
	variable cause_b : std_logic_vector(DATA_WIDTH-1 downto 0);
	variable br_del_ex_b : std_logic_vector(DATA_WIDTH-1 downto 0);
	variable br_del_mem_b : std_logic_vector(DATA_WIDTH-1 downto 0);
	variable pcsrc_out_b : std_logic;
	variable pc_j_out_b : std_logic_vector(PC_WIDTH-1 downto 0);
	variable flush_b : std_logic;
	variable flush_exec_b : std_logic;
	variable flush_mem_b : std_logic;
	variable npc_b : std_logic_vector(PC_WIDTH-1 downto 0);
	begin

		cause_b := (others => '0');	
		/*br_del_ex_b := x"80000000" when (mem_jmpop = JMP_JMP or mem_jmpop = JMP_BEQ or
			mem_jmpop = JMP_BNE or mem_jmpop = JMP_BLEZ or mem_jmpop = JMP_BGTZ or
			mem_jmpop = JMP_BLTZ or mem_jmpop = JMP_BGEZ) else x"00000000"; */
			
		if (mem_jmpop = JMP_JMP or mem_jmpop = JMP_BEQ or
			mem_jmpop = JMP_BNE or mem_jmpop = JMP_BLEZ or mem_jmpop = JMP_BGTZ or
			mem_jmpop = JMP_BLTZ or mem_jmpop = JMP_BGEZ) then
			br_del_ex_b := x"80000000";	
		
		else
			br_del_ex_b := x"00000000";
		end if;
		
		/*br_del_mem_b := x"80000000" when (mem_jmpop_lat = JMP_JMP or mem_jmpop_lat = JMP_BEQ or
			mem_jmpop_lat = JMP_BNE or mem_jmpop_lat = JMP_BLEZ or mem_jmpop_lat = JMP_BGTZ or
			mem_jmpop_lat = JMP_BLTZ or mem_jmpop_lat = JMP_BGEZ) else x"00000000";*/
		
		if (mem_jmpop_lat = JMP_JMP or mem_jmpop_lat = JMP_BEQ or
			mem_jmpop_lat = JMP_BNE or mem_jmpop_lat = JMP_BLEZ or mem_jmpop_lat = JMP_BGTZ or
			mem_jmpop_lat = JMP_BLTZ or mem_jmpop_lat = JMP_BGEZ) then
			
			br_del_mem_b := x"80000000";
		
		else
			br_del_mem_b := x"00000000";
		end if;
		pcsrc_out_b := '0';
		pc_j_out_b := (others => '0');
		flush_b := '0';
		flush_exec_b := '0';
		flush_mem_b := '0';
		npc_b := (others => '0');
		
		
		if exc_ovf = '1' then
		
			cause_b := br_del_ex_b or EX_OVF;
			pcsrc_out_b := '1';
			pc_j_out_b := EXCEPTION_PC;
			flush_b := '1';
			flush_exec_b := '1';
			--npc_b := pc_j_in when br_del_ex_b = x"80000000" else std_logic_vector(unsigned(exec_epc) + to_unsigned(4, PC_WIDTH));
			if br_del_ex_b = x"80000000" and pcsrc_in = '1' then
				npc_b := pc_j_in;
			elsif br_del_ex_b = x"80000000" and pcsrc_in = '0' then
				npc_b := exec_epc;
			else
				npc_b := std_logic_vector(unsigned(exec_epc) + to_unsigned(4, PC_WIDTH));
			end if;
			
		elsif exc_load = '1' then
			
			cause_b := br_del_mem_b or EX_LD;
			pcsrc_out_b := '1';
			pc_j_out_b := EXCEPTION_PC;
			flush_b := '1';
			flush_exec_b := '1';
			flush_mem_b := '1';
			--npc_b := pc_j_lat when br_del_mem_b = x"80000000" else std_logic_vector(unsigned(mem_epc) + to_unsigned(4, PC_WIDTH));
			if br_del_mem_b = x"80000000" and pcsrc_lat = '1' then
				npc_b := pc_j_lat;
			elsif br_del_mem_b = x"80000000" and pcsrc_lat = '0' then
				npc_b := mem_epc;
			else
				--npc_b := std_logic_vector(unsigned(mem_epc) + to_unsigned(4, PC_WIDTH));
				npc_b := mem_epc;
			end if;
		 
		elsif exc_store = '1' then
		
			cause_b := br_del_mem_b or EX_ST;
			pcsrc_out_b := '1';
			pc_j_out_b := EXCEPTION_PC;
			flush_b := '1';
			flush_exec_b := '1';
			flush_mem_b := '1';
			--npc_b := pc_j_lat when br_del_mem_b = x"80000000" else std_logic_vector(unsigned(mem_epc) + to_unsigned(4, PC_WIDTH));
			if br_del_mem_b = x"80000000" and pcsrc_lat = '1' then
				npc_b := pc_j_lat;
			elsif br_del_mem_b = x"80000000" and pcsrc_lat = '0' then
				npc_b := mem_epc;
			else
				npc_b := std_logic_vector(unsigned(mem_epc) + to_unsigned(4, PC_WIDTH));
				--npc_b := mem_epc;
			end if;
		else
			
			cause_b := (others => '0');
			pcsrc_out_b := pcsrc_in;
			pc_j_out_b := pc_j_in;
			--flush_b := pcsrc_in or pcsrc_lat;
			flush_b := pcsrc_in;
		
		end if;
	
		cause_q <= cause_b;
		pcsrc_out <= pcsrc_out_b;
		pc_j_out <= pc_j_out_b;
		flush_q <= flush_b;
		flush <= flush_q or flush_lat;
		flush_exec <= flush_exec_b;
		flush_mem <= flush_mem_b;
		npc_q <= npc_b;
		
	end process;
	



	process(all)
	begin
		
		if reset = '0' then
		
			pcsrc_lat <= '0';
			pc_j_lat <= (others => '0');
			op_saved <= COP0_NOP;
			mem_jmpop_lat <= JMP_NOP;
			cop0_data <= (others => '0');
			--npc_q <= (others => '0');
			status <= (others => '0');
			cause <= (others => '0');
			epc <= (others => '0');
			npc <= (others => '0');
			
		elsif rising_edge(clk) then
		
			if stall = '0' then
				pcsrc_lat <= pcsrc_in;
				pc_j_lat <= pc_j_in;
				op_saved <= op;
				mem_jmpop_lat <= mem_jmpop;
				flush_lat <= flush_q;
				
				if exc_ovf = '1' then
				
					epc <= std_logic_vector(unsigned(("00" & x"0000" & exec_epc)) - to_unsigned(4, PC_WIDTH));
					cause <= cause_q;
					--npc <= std_logic_vector(unsigned(( "00" & x"0000" & npc_q)) - to_unsigned(4, PC_WIDTH)); --( "00" & x"0000" & npc_q);
					npc <= ( "00" & x"0000" & npc_q);
					
				elsif exc_store = '1' or exc_load = '1' then
					
					epc <= std_logic_vector(unsigned(("00" & x"0000" & mem_epc)) - to_unsigned(4, PC_WIDTH));
					cause <= cause_q;
					npc <= ("00" & x"0000" & npc_q);
					
				else
				
					if op.wr = '1' then
				
						case op.addr is
							when ADDR_STATUS =>
								status <= aluresult_exec;
							when ADDR_CAUSE =>
								cause <= aluresult_exec;
							when ADDR_EPC =>
								epc <= aluresult_exec;
							when ADDR_NPC =>
								npc <= aluresult_exec;
							when others =>
								-- nothing
						end case;
					
					end if;
				end if;
				
				case read_reg is
					when ADDR_STATUS =>
						cop0_data <= status;
					when ADDR_CAUSE =>
						cop0_data <= cause;
					when ADDR_EPC =>
						cop0_data <= epc;
					when ADDR_NPC =>
						cop0_data <= npc;
					when others => 
						cop0_data <= (others => '0');
				end case;
			end if;
		
		end if;
	
	end process;

end rtl;
